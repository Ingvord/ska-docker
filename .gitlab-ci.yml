# GitLab CI in conjunction with GitLab Runner can use Docker Engine to test and build any application.
# Docker, when used with GitLab CI, runs each job in a separate and isolated container using the predefined image that is set up in .gitlab-ci.yml.
image: registry.gitlab.com/ska-telescope/ska-docker/tango-builder:latest

services:
  - docker:dind
  
# During the development of software, there can be many stages until it's ready for public consumption. 
# You sure want to first test your code and then deploy it in a testing or staging environment before you release it to the public. 
# That way you can prevent bugs not only in your software, but in the deployment process as well. 
# See also https://docs.gitlab.com/ee/ci/environments.html
stages:
  - build_1
  - build_2
  - build_3
  - pull-containers
  - test
  - stop-containers

build_dependencies:
  stage: build_1
  tags:
    - engageska
    - shell
  script: 
    - cd docker/tango/tango-dependencies
    - make DOCKER_REGISTRY_USER=$DOCKER_REGISTRY_USER DOCKER_REGISTRY_HOST=$DOCKER_REGISTRY_HOST build
    - make DOCKER_REGISTRY_USER=$DOCKER_REGISTRY_USER DOCKER_REGISTRY_HOST=$DOCKER_REGISTRY_HOST push
  when: manual
  
build_tango-db:
  stage: build_1
  tags:
    - engageska
  script: 
    - cd docker/tango/tango-db
    - make DOCKER_REGISTRY_USER=$DOCKER_REGISTRY_USER DOCKER_REGISTRY_HOST=$DOCKER_REGISTRY_HOST build
    - make DOCKER_REGISTRY_USER=$DOCKER_REGISTRY_USER DOCKER_REGISTRY_HOST=$DOCKER_REGISTRY_HOST push
  when: manual

build_tango-builder:
  stage: build_1
  tags:
    - engageska
  script: 
    - cd docker/tango/tango-builder
    - make DOCKER_REGISTRY_USER=$DOCKER_REGISTRY_USER DOCKER_REGISTRY_HOST=$DOCKER_REGISTRY_HOST build
    - make DOCKER_REGISTRY_USER=$DOCKER_REGISTRY_USER DOCKER_REGISTRY_HOST=$DOCKER_REGISTRY_HOST push
  when: manual
  
build_tango-cpp:
  stage: build_2
  tags:
    - engageska
  script: 
    - cd docker/tango/tango-cpp
    - make DOCKER_REGISTRY_USER=$DOCKER_REGISTRY_USER DOCKER_REGISTRY_HOST=$DOCKER_REGISTRY_HOST build
    - make DOCKER_REGISTRY_USER=$DOCKER_REGISTRY_USER DOCKER_REGISTRY_HOST=$DOCKER_REGISTRY_HOST push
  when: manual
  
build_tango-java:
  stage: build_2
  tags:
    - engageska
  script: 
    - cd docker/tango/tango-java
    - make DOCKER_REGISTRY_USER=$DOCKER_REGISTRY_USER DOCKER_REGISTRY_HOST=$DOCKER_REGISTRY_HOST build
    - make DOCKER_REGISTRY_USER=$DOCKER_REGISTRY_USER DOCKER_REGISTRY_HOST=$DOCKER_REGISTRY_HOST push
  when: manual
  
build_tango-python:
  stage: build_3
  tags:
    - engageska
  script: 
    - cd docker/tango/tango-python
    - make DOCKER_REGISTRY_USER=$DOCKER_REGISTRY_USER DOCKER_REGISTRY_HOST=$DOCKER_REGISTRY_HOST build
    - make DOCKER_REGISTRY_USER=$DOCKER_REGISTRY_USER DOCKER_REGISTRY_HOST=$DOCKER_REGISTRY_HOST push
  when: manual
    
build_tango-rest:
  stage: build_3
  tags:
    - engageska
  script: 
    - cd docker/tango/tango-rest
    - make DOCKER_REGISTRY_USER=$DOCKER_REGISTRY_USER DOCKER_REGISTRY_HOST=$DOCKER_REGISTRY_HOST build
    - make DOCKER_REGISTRY_USER=$DOCKER_REGISTRY_USER DOCKER_REGISTRY_HOST=$DOCKER_REGISTRY_HOST push
  when: manual
  
build_tango-pogo:
  stage: build_3
  tags:
    - engageska
  script: 
    - cd docker/tango/tango-pogo
    - make DOCKER_REGISTRY_USER=$DOCKER_REGISTRY_USER DOCKER_REGISTRY_HOST=$DOCKER_REGISTRY_HOST build
    - make DOCKER_REGISTRY_USER=$DOCKER_REGISTRY_USER DOCKER_REGISTRY_HOST=$DOCKER_REGISTRY_HOST push
  when: manual

build_tango-starter:
  stage: build_3
  tags:
    - engageska
  script: 
    - cd docker/tango/tango-starter
    - make DOCKER_REGISTRY_USER=$DOCKER_REGISTRY_USER DOCKER_REGISTRY_HOST=$DOCKER_REGISTRY_HOST build
    - make DOCKER_REGISTRY_USER=$DOCKER_REGISTRY_USER DOCKER_REGISTRY_HOST=$DOCKER_REGISTRY_HOST push
  when: manual

start-framework:
  stage: pull-containers
  tags:
    - engageska
  script:
    - cd docker-compose
    - make pull
   
stop-framework:
  stage: stop-containers
  tags:
    - engageska
  script:
    - cd docker-compose
    - make stop tangotest
    - make stop rest
    - make down
  
test-framework-tangotest:
  stage: test
  tags:
    - engageska
  script:
    - cd docker-compose
    - make up 
    - make start tangotest
    - make start rest
    - echo "******** Test Result ********" > result.txt
    - docker cp SimpleTest.py tangotest:/home/tango/SimpleTest.py 
    - docker cp SimplePyTest.py tangotest:/home/tango/SimplePyTest.py 
    - echo "docker exec tangotest python3 /home/tango/SimpleTest.py" >> result.txt
    - docker exec tangotest python3 /home/tango/SimpleTest.py >> result.txt
    - echo "docker exec tangotest pytest -q /home/tango/SimplePyTest.py" >> result.txt
    - docker exec tangotest pytest -q /home/tango/SimplePyTest.py >> result.txt
    - more result.txt
    - cd ..
    - mkdir .public
    - cp docker-compose/result.txt .public/result.txt
    - mv .public public
  artifacts:
    paths:
    - public  
  
test-framework-tangorest:
  stage: test
  tags:
    - engageska
  script:
    - make start tangotest
    - make start rest
    - echo "******** Test Result ********" > result.txt
    - echo "docker exec tango-rest curl --user tango-cs:tango http://127.0.0.1:8080/tango/rest/rc4/hosts/databaseds/10000/devices/sys/tg_test/1/attributes/boolean_scalar/value" >> result.txt
    - docker exec tango-rest curl --user tango-cs:tango http://127.0.0.1:8080/tango/rest/rc4/hosts/databaseds/10000/devices/sys/tg_test/1/attributes/boolean_scalar/value >>  result.txt
    - more result.txt
    - mkdir .public
    - cp result.txt .public/result.txt
    - mv .public public
  artifacts:
    paths:
    - public 
  