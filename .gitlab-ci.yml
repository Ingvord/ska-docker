# GitLab CI in conjunction with GitLab Runner can use Docker Engine to test and build any application.
# Docker, when used with GitLab CI, runs each job in a separate and isolated container using the predefined image that is set up in .gitlab-ci.yml.
# In this case we use the latest python docker image to build and test this project.
image: docker:latest

services:
  - docker:dind

before_script:
  - apk update
  - apk add make bash git curl
  - chown -R $(whoami) /usr/local/bin
  - curl -L "https://github.com/docker/compose/releases/download/1.22.0/docker-compose-$(uname -s)-$(uname -m)" -o /usr/local/bin/docker-compose
  - chmod -x /usr/local/bin/docker-compose
  - /usr/local/bin/docker-compose run test
  - docker login -u "$CI_REGISTRY_USER" -p "$CI_REGISTRY_PASSWORD" $CI_REGISTRY
  
build-master:
  stage: build
  tags:
    - ska
  script:
    - ls -la
    - cd docker
    - echo DOCKER_REGISTRY_USER=$DOCKER_REGISTRY_USER
    - echo DOCKER_REGISTRY_HOST=$DOCKER_REGISTRY_HOST
    #- make DOCKER_REGISTRY_USER=$DOCKER_REGISTRY_USER build
    - make DOCKER_REGISTRY_USER=$DOCKER_REGISTRY_USER DOCKER_REGISTRY_HOST=$DOCKER_REGISTRY_HOST push
  only:
    - master

test-master:
  stage: build
  tags:
    - ska
  script:
    - cd docker-compose
    - curl -L "https://github.com/docker/compose/releases/download/1.22.0/docker-compose-$(uname -s)-$(uname -m)" -o docker-compose
    - make pull
    - make up
    - make start tangotest
  only:
    - master
